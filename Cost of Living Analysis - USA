import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# 1. Load the dataset
data = pd.read_csv(r"C:/Users/arokh/Downloads/Cost of Living - USA - Sheet1.csv")

# Quick look
print(data.head())
print(data.describe())

# 2. Filter to the columns we care about and drop rows with missing State
cols = [
    "State",
    "Meal_Inexpensive_Restaurant_USD",
    "Basic_Electricity_Heating_Cooling_Water_Garbage_for_85m2_Apartment_USD",
    "Apartment_1_bedroom_in_City_Centre_USD",
    "Apartment_1_bedroom_Outside_of_Centre_USD"
]
relevant = data[cols].dropna(subset=["State"])

# 3. Compute average Meal, Utilities, and Rent for California
ca = relevant[relevant["State"] == "California"]
california_averages = {
    "Avg_Meal":        ca["Meal_Inexpensive_Restaurant_USD"].mean(),
    "Avg_Utilities":   ca["Basic_Electricity_Heating_Cooling_Water_Garbage_for_85m2_Apartment_USD"].mean(),
    "Avg_Rent":        ((ca["Apartment_1_bedroom_in_City_Centre_USD"]
                        + ca["Apartment_1_bedroom_Outside_of_Centre_USD"]) / 2).mean()
}

# 4. Compute the national averages (excluding California)
nat = relevant[relevant["State"] != "California"]
national_averages = {
    "Avg_Meal":        nat["Meal_Inexpensive_Restaurant_USD"].mean(),
    "Avg_Utilities":   nat["Basic_Electricity_Heating_Cooling_Water_Garbage_for_85m2_Apartment_USD"].mean(),
    "Avg_Rent":        ((nat["Apartment_1_bedroom_in_City_Centre_USD"]
                        + nat["Apartment_1_bedroom_Outside_of_Centre_USD"]) / 2).mean()
}

# 5. Combine into a DataFrame
comparison = pd.DataFrame([california_averages, national_averages],
                          index=["California", "National Average"])
print(comparison)

# 6. Melt for plotting
comp_long = comparison.reset_index().melt(id_vars="index",
                                         var_name="Category",
                                         value_name="Average")\
                      .rename(columns={"index": "Location"})

# 7. Plot each category in its own figure
for category in comp_long["Category"].unique():
    df = comp_long[comp_long["Category"] == category]
    plt.figure()
    plt.bar(df["Location"], df["Average"])
    plt.title(f"{category.replace('Avg_', 'Average ')}: California vs National")
    plt.ylabel("USD")
    plt.tight_layout()

# 8. --- Transportation costs section ---
# Load and filter
data2 = pd.read_csv(r"C:/Users/arokh/Downloads/Cost of Living - USA - Sheet1.csv")
trans_cols = [
    "State",
    "One.way_Ticket_Local_Transport_USD",
    "Monthly_Pass_Regular_Price_USD",
    "Taxi_Start_Normal_Tariff_USD",
    "Taxi_1km_Normal_Tariff_USD",
    "Taxi_1hour_Waiting_Normal_Tariff_USD"
]
trans = data2[trans_cols].dropna(subset=["State"])

# Averages for CA and National
ca_trans = trans[trans["State"] == "California"]
nat_trans = trans[trans["State"] != "California"]

calc_avg = lambda df: {
    "Avg_OneWayTicket": df["One.way_Ticket_Local_Transport_USD"].mean(),
    "Avg_MonthlyPass":  df["Monthly_Pass_Regular_Price_USD"].mean(),
    "Avg_TaxiStart":    df["Taxi_Start_Normal_Tariff_USD"].mean(),
    "Avg_Taxi1km":      df["Taxi_1km_Normal_Tariff_USD"].mean(),
    "Avg_Taxi1hour":    df["Taxi_1hour_Waiting_Normal_Tariff_USD"].mean()
}

ca_trans_avg  = calc_avg(ca_trans)
nat_trans_avg = calc_avg(nat_trans)

# Combine and melt
trans_comp = pd.DataFrame([ca_trans_avg, nat_trans_avg],
                          index=["California", "National Average"])
trans_long = (trans_comp.reset_index()
                         .melt(id_vars="index", var_name="Category", value_name="Average")
                         .rename(columns={"index":"Location"}))

# Plot transport comparison
plt.figure(figsize=(8,5))
for loc in trans_long["Location"].unique():
    df = trans_long[trans_long["Location"]==loc]
    plt.bar(df["Category"], df["Average"], alpha=0.7, label=loc)
plt.xticks(rotation=45, ha="right")
plt.ylabel("USD")
plt.title("Transportation Costs: California vs National")
plt.legend()
plt.tight_layout()

# Save the figure with transparent background
plt.savefig("transport_comparison.png", transparent=True)

# 9. --- Top/Bottom City Meal Costs & Data Quality Pie Chart ---
# Assuming you have a 'City' column in your data and a dataâ€‘quality flag column
df = data.copy()
df = df.assign(Avg_Meal_Cost = df["Meal_Inexpensive_Restaurant_USD"]).dropna(subset=["Avg_Meal_Cost","City"])

# Top 5 cheapest and 5 most expensive
top5    = df.nsmallest(5, "Avg_Meal_Cost")[["City","Avg_Meal_Cost"]]
bottom5 = df.nlargest(5, "Avg_Meal_Cost")[["City","Avg_Meal_Cost"]]
cities  = pd.concat([top5, bottom5])

plt.figure(figsize=(8,5))
plt.bar(cities["City"], cities["Avg_Meal_Cost"])
plt.xticks(rotation=45, ha="right")
plt.title("Top 5 vs Bottom 5 Meal Costs by City")
plt.ylabel("USD")
plt.tight_layout()

# Data quality distribution pie chart
quality_col = "if_Numbeo_considers_that_more_contributors_are_needed_to_increase_data_quality_else"
if quality_col in data:
    counts = data[quality_col].value_counts()
    plt.figure()
    plt.pie(counts, labels=counts.index, autopct="%1.1f%%")
    plt.title("Data Quality Distribution")
    plt.tight_layout()

plt.show()
